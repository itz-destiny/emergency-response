{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the Rapid Response system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "firstName": {
          "type": "string",
          "description": "First name of the user."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the user."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the user."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email"
      ]
    },
    "Hospital": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Hospital",
      "type": "object",
      "description": "Represents a hospital registered in the Rapid Response system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Hospital entity."
        },
        "name": {
          "type": "string",
          "description": "Name of the hospital."
        },
        "location": {
          "type": "string",
          "description": "Geographic location of the hospital (e.g., latitude, longitude)."
        },
        "hotline": {
          "type": "string",
          "description": "Hotline phone number for the hospital."
        },
        "email": {
          "type": "string",
          "description": "Email address of the hospital.",
          "format": "email"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the hospital was registered.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "location",
        "hotline"
      ]
    },
    "Responder": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Responder",
      "type": "object",
      "description": "Represents a medical responder associated with a hospital.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Responder entity."
        },
        "hospitalId": {
          "type": "string",
          "description": "Reference to Hospital. (Relationship: Hospital 1:N Responder)"
        },
        "firstName": {
          "type": "string",
          "description": "First name of the responder."
        },
        "lastName": {
          "type": "string",
          "description": "Last name of the responder."
        },
        "email": {
          "type": "string",
          "description": "Email address of the responder.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "Phone number of the responder."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the responder account was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "hospitalId",
        "firstName",
        "lastName",
        "email"
      ]
    },
    "Request": {
      "title": "Request",
      "type": "object",
      "description": "Stores emergency requests from users.",
      "properties": {
        "userId": {
          "type": "string"
        },
        "hospitalId": {
          "type": "string"
        },
        "hospitalName": {
          "type": "string"
        },
        "patientLocation": {
          "type": "object",
          "properties": {
            "lat": {
              "type": "number"
            },
            "lng": {
              "type": "number"
            }
          }
        },
        "message": {
          "type": "string",
          "description": "An optional message from the user about the emergency."
        },
        "status": {
          "type": "string",
          "enum": [
            "pending",
            "accepted",
            "enroute",
            "resolved",
            "cancelled"
          ]
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      },
      "required": [
        "userId",
        "hospitalId",
        "patientLocation",
        "status"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information. Uses path-based ownership, so only the user can access their own document.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/hospitals/{hospitalId}",
        "definition": {
          "entityName": "Hospital",
          "schema": {
            "$ref": "#/backend/entities/Hospital"
          },
          "description": "Stores hospital information. ",
          "params": [
            {
              "name": "hospitalId",
              "description": "The unique identifier of the hospital."
            }
          ]
        }
      },
      {
        "path": "/hospitals/{hospitalId}/responders/{responderId}",
        "definition": {
          "entityName": "Responder",
          "schema": {
            "$ref": "#/backend/entities/Responder"
          },
          "description": "Stores responder information associated with a specific hospital. Path-based ownership ensures only the hospital can manage its responders.",
          "params": [
            {
              "name": "hospitalId",
              "description": "The unique identifier of the hospital."
            },
            {
              "name": "responderId",
              "description": "The unique identifier of the responder."
            }
          ]
        }
      },
      {
        "path": "/requests/{requestId}",
        "definition": {
          "entityName": "Request",
          "schema": {
            "$ref": "#/backend/entities/Request"
          },
          "description": "Stores emergency requests from users. Includes denormalized hospital information to avoid `get()` calls in security rules and maintain authorization independence. Includes userId to simplify security rules.",
          "params": [
            {
              "name": "requestId",
              "description": "The unique identifier of the emergency request."
            }
          ]
        }
      },
      {
        "path": "/roles_hospital/{uid}",
        "definition": {
          "entityName": "HospitalRole",
          "schema": {
            "$ref": "#/backend/entities/Role"
          },
          "description": "Indicates that a user is a hospital representative. Existence of the document grants hospital-level permissions.",
          "params": [
            {
              "name": "uid",
              "description": "The Firebase UID of the hospital representative."
            }
          ]
        }
      },
      {
        "path": "/roles_user/{uid}",
        "definition": {
          "entityName": "UserRole",
          "schema": {
            "$ref": "#/backend/entities/Role"
          },
          "description": "Indicates that a user is a registered user. Existence of the document grants user-level permissions.",
          "params": [
            {
              "name": "uid",
              "description": "The Firebase UID of the user."
            }
          ]
        }
      }
    ],
    "reasoning": "This Firestore structure prioritizes authorization independence and efficient data retrieval for the Rapid Response application. It leverages structural segregation to manage different access control requirements for users, hospitals, and responders. Key to this structure is the separation of user and hospital data into distinct collections with path-based ownership for user-specific data and membership maps for collaborative data access. The inclusion of the `requests` subcollection enables hospitals to manage incoming requests efficiently. Authorization Independence is achieved through denormalization, specifically including hospital details within the request documents, this eliminates the need for complex `get()` calls in security rules. All these design choices allows for secure `list` operations and easier maintainability of the rules. The `roles_hospital/{uid}` and `roles_user/{uid}` collections, combined with `request.auth.uid`, enforces Role-Based Access Control (RBAC) without custom claims."
  }
}
