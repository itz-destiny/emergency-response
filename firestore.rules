/**
 * @fileoverview Firestore Security Rules for Rapid Response Application
 *
 * Core Philosophy:
 * This ruleset enforces a hybrid security model:
 *   - User data is strictly owned by the individual user.
 *   - Hospital data is managed by authenticated hospital representatives.
 *   - Responders are managed by their associated hospitals.
 *   - Requests can be created by any authenticated user.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only by the user.
 * - /hospitals/{hospitalId}: Hospital information, accessible to all for reads, but only writable by authenticated hospital representatives.
 * - /hospitals/{hospitalId}/responders/{responderId}: Responder data, managed by the associated hospital.
 * - /requests/{requestId}: Emergency requests from users, with denormalized hospital data for authorization.
 * - /roles_hospital/{uid}: Documents indicating a user is a hospital representative, granting hospital-level permissions.
 * - /roles_user/{uid}: Documents indicating a user is a registered user, granting user-level permissions.
 *
 * Key Security Decisions:
 * - User listing is disabled.
 * - Hospital data is publicly readable but only writable by authenticated hospital representatives.
 * - Responders can only be managed by their associated hospital.
 * - Requests can only be created by authenticated users.
 *
 * Denormalization for Authorization:
 * - Request documents include denormalized hospital information to avoid `get()` calls in security rules.
 *
 * Structural Segregation:
 * - User and hospital data are stored in separate collections with distinct access control requirements.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile information. Only the user can access their own document.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own document if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can get, update, and delete their document.
     * @deny (create, get, update, delete) - User with UID 'user456' cannot access 'user123' document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      //function
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Manages hospital information. Publicly readable, writable only by authenticated hospital representatives.
     * @path /hospitals/{hospitalId}
     * @allow (get, list) - Anyone can read hospital information.
     * @allow (create, update, delete) - Only an authenticated hospital representative can create, update, or delete hospital data.
     * @deny (create, update, delete) - A regular user cannot create, update, or delete hospital data.
     * @principle Role-based access control for hospital management.
     */
    match /hospitals/{hospitalId} {
      function isHospitalRep() {
        return exists(/databases/$(database)/documents/roles_hospital/$(request.auth.uid));
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isHospitalRep();
      allow update: if isSignedIn() && isHospitalRep() && resource != null;
      allow delete: if isSignedIn() && isHospitalRep() && resource != null;
    }

    /**
     * @description Manages responder information for a specific hospital. Only the hospital can manage its responders.
     * @path /hospitals/{hospitalId}/responders/{responderId}
     * @allow (get, list) - Only the hospital can read responder data.
     * @allow (create, update, delete) - Only the hospital can create, update, or delete responder data.
     * @deny (create, update, delete) - A regular user or a different hospital cannot manage this hospital's responders.
     * @principle Path-based access control for hospital-responder relationship.
     */
    match /hospitals/{hospitalId}/responders/{responderId} {
      function isHospitalRep() {
        return exists(/databases/$(database)/documents/roles_hospital/$(request.auth.uid));
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get, list: if isSignedIn() && isHospitalRep();
      allow create: if isSignedIn() && isHospitalRep();
      allow update: if isSignedIn() && isHospitalRep() && resource != null;
      allow delete: if isSignedIn() && isHospitalRep() && resource != null;
    }

    /**
     * @description Manages emergency requests from users.
     * @path /requests/{requestId}
     * @allow (create) - Any authenticated user can create a request.
     * @allow (get, list, update, delete) - Only an authenticated hospital representative can get, list, update or delete a request
     * @deny (create) - An unauthenticated user cannot create a request.
     * @principle Authenticated users can create requests, hospitals manage them.
     */
    match /requests/{requestId} {
      function isHospitalRep() {
        return exists(/databases/$(database)/documents/roles_hospital/$(request.auth.uid));
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get, list: if isSignedIn() && isHospitalRep();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isHospitalRep() && resource != null;
      allow delete: if isSignedIn() && isHospitalRep() && resource != null;
    }

     /**
      * @description Indicates that a user is a hospital representative. Existence of the document grants hospital-level permissions.
      * @path /roles_hospital/{uid}
      */
    match /roles_hospital/{uid} {
        function isOwner(uid) {
          return request.auth.uid == uid;
        }

        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn() && isOwner(uid);
        allow list: if false;
        allow create: if isSignedIn() && isOwner(uid);
        allow update: if false;
        allow delete: if isSignedIn() && isOwner(uid);
    }

    /**
     * @description Indicates that a user is a registered user. Existence of the document grants user-level permissions.
     * @path /roles_user/{uid}
     */
    match /roles_user/{uid} {
        function isOwner(uid) {
          return request.auth.uid == uid;
        }

        function isSignedIn() {
            return request.auth != null;
        }

        allow get: if isSignedIn() && isOwner(uid);
        allow list: if false;
        allow create: if isSignedIn() && isOwner(uid);
        allow update: if false;
        allow delete: if isSignedIn() && isOwner(uid);
    }
  }
}